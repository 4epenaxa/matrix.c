import numpy as np

# Define a function to generate a random matrix of size n x m
def generate_matrix(n, m):
    return np.random.uniform(low=0.01, high=10.0, size=(n, m))

# Define the number of test cases to generate
num_tests = 10

# Loop through the number of test cases and generate inputs and expected outputs
for i in range(num_tests):
    # Generate two random matrices of size n x m and m x p
    n = np.random.randint(1, 10)
    m = np.random.randint(1, 10)
    p = np.random.randint(1, 10)
    matrix_A = generate_matrix(n, m)
    matrix_B = generate_matrix(m, p)
    expected_output = np.dot(matrix_A, matrix_B)
    
    # Print the input matrices and expected output in C array format
    
    print(f"START_TEST(test_mult_matrix_{i + 1}) {{")
    print("  matrix_t A, B, C, RES;")
    print(f"  s21_create_matrix({n}, {m}, &A);")
    print(f"  s21_create_matrix({m}, {p}, &B);")
    print(f"  s21_create_matrix({n}, {p}, &RES);")
    print("  double arr1[] = {")
    for row in matrix_A:
        print(f"    " + ", ".join(str(e) for e in row) + ",")
        
    print("  };")
    print("  double arr2[] = {")
    for row in matrix_B:
        print(f"    "+ ", ".join(str(e) for e in row) + ",")
    print("  };")
    print("  double arr3[] = {")
    for row in expected_output:
        print(f"    " + ", ".join(str(e) for e in row) + ",")
    print("  };")
    print("  from_array_to_matrix(&A, arr1);")
    print("  from_array_to_matrix(&B, arr2);")
    print("  from_array_to_matrix(&RES, arr3);")
    print("   ck_assert_int_eq(s21_mult_matrix(&A, &B, &C), OK);")
    print("  ck_assert_int_eq(s21_eq_matrix(&C, &RES), SUCCESS);")
    print("  s21_remove_matrix(&A);")
    print("  s21_remove_matrix(&B);")
    print("  s21_remove_matrix(&C);")
    print("  s21_remove_matrix(&RES);")
    print("}")
    print("END_TEST")
    print()